####################
# functions
####################

function stop_mcafee() {
    sudo /usr/local/McAfee/AntiMalware/VSControl stop; sudo /usr/local/McAfee/AntiMalware/VSControl stopoas
}

function start_mcafee() {
  sudo /usr/local/McAfee/AntiMalware/VSControl start; sudo /usr/local/McAfee/AntiMalware/VSControl startoas }

prettyjson_s() {
    echo "$1" | python -m json.tool
}

prettyjson_linejson() {
    cat "$1"| while read line; do prettyjson_s "$line"; done
}
# find shorthand
function f() {
    find . -name "$1"
}
# print available colors and their numbers
function colours() {
    for i in {0..255}; do
        printf "\x1b[38;5;${i}m colour${i}"
        if (( $i % 5 == 0 )); then
            printf "\n"
        else
            printf "\t"
        fi
    done
}

# Create a new directory and enter it
function md() {
    mkdir -p "$@" && cd "$@"
}

function hist() {
    history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}

# find shorthand
function f() {
    find . -name "$1"
}

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fh - repeat history
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# fkill - kill process
fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}



# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git branch -vv --sort=committerdate) &&
  branch=$(echo "$branches" | fzf +m --no-sort --tac) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# fcs - get git commit sha
# example usage: git rebase -i `fcs`
fcs() {
  local commits commit
  commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}

sqlnet_tunnel () {
 
    local usage="usage: ${FUNCNAME} [-s <SSH_START_PORT>] <hostname|rrset>[:port]/<service_name>"
 
    unset OPTIND
    while getopts ":hs:" opt; do
        case "${opt}" in
            h)  echo "${usage}"; return 0;;
            s)  local ssh_port="${OPTARG}";;
            \?) echo "${usage}" >&2; return 1;;
        esac
    done
    shift $((${OPTIND} - 1))
 
    if [[ $# -lt 1 ]]; then echo ${usage}; return 1; fi
 
    local conn_str="${1##*@}"
    local conn_str="${conn_str##*//}"
 
    local dns_name="${conn_str%%/*}"
    local svc_name="${conn_str##*/}"
 
    if [[ "${dns_name}" =~ ":" ]]; then
        sql_port="${dns_name##*:}"
        dns_name="${dns_name%%:*}"
    fi
 
    local ad=$(echo "${dns_name}" | awk -F. '{print $(NF-1)}')
    local rg=$(echo "${dns_name}" | awk -F. '{print $(NF)}')
 
    bastions=(
        $(
            for a in "${ad}" "svc" "ad1" "ad2" "ad3" "pop1" "pop2"; do
                if [[ "${a}" = "svc" ]]; then
                     echo "bastion.${rg}.oracleiaas.com"
                else
                     echo "bastion-${a}.${rg}.oracleiaas.com"
                fi
            done
        )
    )
 
    local ssh_port="${ssh_port:-2000}"
     for (( ssh_port; ssh_port<=$((ssh_port+500)); ssh_port+=3 )); do
        lsof -i tcp:$ssh_port 1>/dev/null 2>/dev/null
        if [[ $? -eq 0 ]]; then continue; fi;
 
        lsof -i tcp:$((ssh_port+1)) 1>/dev/null 2>/dev/null
        if [[ $? -eq 0 ]]; then continue; fi;
 
        lsof -i tcp:$((ssh_port+2)) 1>/dev/null 2>/dev/null
        if [[ $? -eq 0 ]]; then continue; fi;
 
        break;
    done
    echo "#> Setting starting ssh port to $ssh_port"
 
    local sql_port="${sql_port:-1521}"
 
    for bastion in "${bastions[@]}"; do
        echo "#> Trying to resolve RRSet ${dns_name} on ${bastion}"
        ipaddrs="$(ssh -o StrictHostKeyChecking=no ${bastion} "getent hosts ${dns_name}" )" && {
            ipaddrs=($(echo "${ipaddrs}" | awk '{print $1 }'))
            echo "#> RRSet ${dns_name} resolved to: ${ipaddrs[*]}"
            break;
        }
        echo "!> Failed to resolve RRSet ${dns_name} on ${bastion}"
    done
 
    if [[ -z "${ipaddrs}" ]]; then echo "!> Unable to resolve RRSet ${dns_name}"; return 1; fi
 
    for ipaddr in ${ipaddrs[*]}; do
        local sshaddrlist="${sshaddrlist} -L${ssh_port}:${ipaddr}:${sql_port}"
        local sqladdrlist="${sqladdrlist}(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=${ssh_port}))"
        (( ssh_port++ ))
    done
 
    echo "#> Use the following connection string after the tunnel is established:"
    echo "-----------------------------------------------------------------------"
    echo "jdbc:oracle:thin:@(DESCRIPTION=(CONNECT_TIMEOUT=5)(TRANSPORT_CONNECT_TIMEOUT=3)(RETRY_COUNT=20)(ADDRESS_LIST=(LOAD_BALANCE=OFF)(FAILOVER=ON)${sqladdrlist})(CONNECT_DATA=(SERVICE_NAME=${svc_name})))"
    echo "-----------------------------------------------------------------------"
 
    echo "#> Establishing ssh tunnel"
    echo "#> ssh -o StrictHostKeyChecking=no ${sshaddrlist} ${bastion}"
    ssh -o StrictHostKeyChecking=no ${sshaddrlist} ${bastion} 2>/dev/null
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}


# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

killPortTcp ()
{
    sudo lsof -t -i tcp:$1 | xargs kill
}



